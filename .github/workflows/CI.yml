# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
  # # Run tests every month
  # schedule:
  #   - cron: '0 0 1 * *'
      
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: "Ubuntu OpenMPI g++"
            CC_COMPILER: gcc 
            CXX_COMPILER: g++ 
            container: "ubuntu_openmpi"
            MPIEXEC_PREFLAGS: "--allow-run-as-root --oversubscribe" 
            USE_SANITIZER: "" 
            CMAKE_BUILD_TYPE: Release
            DOCKER_OPTIONS: " "

          - name: "Ubuntu OpenMPI clang++"
            CC_COMPILER: clang 
            CXX_COMPILER: clang++ 
            container: "ubuntu_openmpi"
            MPIEXEC_PREFLAGS: "--allow-run-as-root --oversubscribe" 
            USE_SANITIZER: "" 
            CMAKE_BUILD_TYPE: Release
            DOCKER_OPTIONS: " "

          - name: "Ubuntu MPICH g++"
            CC_COMPILER: gcc 
            CXX_COMPILER: g++ 
            container: "ubuntu_mpich"
            MPIEXEC_PREFLAGS: "" 
            CMAKE_BUILD_TYPE: Release
            DOCKER_OPTIONS: " "

          - name: "Ubuntu MPICH clang++"
            CC_COMPILER: clang 
            CXX_COMPILER: clang++ 
            container: "ubuntu_mpich"
            MPIEXEC_PREFLAGS: "" 
            CMAKE_BUILD_TYPE: Release
            DOCKER_OPTIONS: " "
          
          # Hangs on github
          # - name: "Debian OpenMPI g++"
          #   CC_COMPILER: gcc 
          #   CXX_COMPILER: g++ 
          #   container: "debian_openmpi"
          #   MPIEXEC_PREFLAGS: "--allow-run-as-root --oversubscribe --mca btl_vader_single_copy_mechanism none" 
          #   USE_SANITIZER: "" 
          #   CMAKE_BUILD_TYPE: Debug
          #   DOCKER_OPTIONS: "--cap-add SYS_PTRACE"

          # - name: "Debian OpenMPI clang++"
          #   CC_COMPILER: clang 
          #   CXX_COMPILER: clang++ 
          #   container: "debian_openmpi"
          #   MPIEXEC_PREFLAGS: "--allow-run-as-root --oversubscribe --mca btl_vader_single_copy_mechanism none" 
          #   USE_SANITIZER: "" 
          #   CMAKE_BUILD_TYPE: Debug
          #   DOCKER_OPTIONS: "--cap-add SYS_PTRACE"

          - name: "Debian MPICH g++"
            CC_COMPILER: gcc 
            CXX_COMPILER: g++ 
            container: "debian_mpich"
            MPIEXEC_PREFLAGS: "" 
            CMAKE_BUILD_TYPE: Release
            DOCKER_OPTIONS: " "

          - name: "Debian MPICH clang++"
            CC_COMPILER: clang 
            CXX_COMPILER: clang++ 
            container: "debian_mpich"
            MPIEXEC_PREFLAGS: "" 
            CMAKE_BUILD_TYPE: Release
            DOCKER_OPTIONS: " "

        
    container: 
      image: pierremarchand/htool_testing_environments:${{ matrix.container }}
      options: ${{ matrix.DOCKER_OPTIONS }}
    
    name: CI (${{ matrix.name }})
    
    env:
      CC: ${{ matrix.CC_COMPILER }}
      CXX: ${{ matrix.CXX_COMPILER }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:

      - name: Checkout htool-python
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Build  package
        run: |
          pip3 install .

      - name: Run tests
        run: |
          mpirun -np 2 ${{ matrix.MPIEXEC_PREFLAGS }} pytest tests
          mpirun -np 3 ${{ matrix.MPIEXEC_PREFLAGS }} pytest tests
          mpirun -np 4 ${{ matrix.MPIEXEC_PREFLAGS }} pytest tests